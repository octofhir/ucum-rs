name: Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Publish ucum-core
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}
        run: cargo publish -p octofhir-ucum-core --all-features --no-verify
      - name: Wait for ucum-core to be available
        run: |
          for i in {1..10}; do
            sleep 10
            cargo search ucum-core | grep ucum-core && break
          done
      - name: Set ucum-cli dependency to publish mode
        run: ./toggle-ucum-core-dep.sh publish
      - name: Publish ucum-cli
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}
        run: cargo publish -p octofhir-ucum-cli --all-features --no-verify  --allow-dirty
      - name: Set ucum-fhir dependency to publish mode
        run: ./toggle-ucum-core-dep.sh publish ucum-fhir
      - name: Publish ucum-fhir
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}
        run: cargo publish -p octofhir-ucum-fhir --all-features --no-verify  --allow-dirty

      # WASM Package Publishing
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false

      - name: Get version for WASM
        id: get_wasm_version
        run: |
          # Extract version from Cargo.toml
          echo "VERSION=$(awk -F ' *= *' '/^version *=/ {gsub(/\"/, "", $2); print $2; exit}' Cargo.toml)" >> $GITHUB_OUTPUT

      - name: Update version in ucum-wasm package.json
        run: |
          cd ucum-wasm
          # Update version
          node -e "const pkg = require('./package.json'); pkg.version = '${{ steps.get_wasm_version.outputs.VERSION }}'; require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2))"

      - name: Build WASM package
        run: |
          cd ucum-wasm
          wasm-pack build --target bundler --out-name octofhir_ucum_wasm

      - name: Prepare WASM package for publishing
        run: |
          cd ucum-wasm
          # Copy types directory to pkg
          mkdir -p pkg/types
          cp -r types/* pkg/types/
          
          # Copy README to pkg
          cp README.md pkg/
          
          # Create proper package.json for publishing
          cd pkg
          node -e "
            const sourcePkg = require('../package.json');
            const pkg = {
              name: sourcePkg.name,
              version: '${{ steps.get_wasm_version.outputs.VERSION }}',
              description: sourcePkg.description,
              repository: sourcePkg.repository,
              author: sourcePkg.author,
              license: sourcePkg.license,
              keywords: sourcePkg.keywords,
              files: ['*.js', '*.wasm', '*.d.ts', 'types/', 'README.md'],
              main: 'octofhir_ucum_wasm.js',
              types: 'types/index.d.ts'
            };
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Publish WASM to npm
        run: |
          cd ucum-wasm/pkg
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
